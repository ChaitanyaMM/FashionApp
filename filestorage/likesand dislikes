public Video setLikeCount(long id,boolean value,String userId) {
  Video video =  videoRepository.findOne(id);
  if(value)
   video.setLikes((video.getLikes()+1));
  else{
   if(video.getLikes() >0)
    video.setLikes((video.getLikes()-1));
  }
  
  Likes likes = likeRepository.getLikeDetails(Long.parseLong(userId), id);
  if(likes != null){   
   likes.setLiked(value);       
   likeRepository.save(likes);
  }
  else{
   Likes like = new Likes(Long.parseLong(userId), id, value, false);
   likeRepository.save(like)
;
  }
  return videoRepository.save(video);
 }
 
 public Video setDisLikeCount(long id,boolean value,String userId) {
  Video video =  videoRepository.findOne(id);
  if(value)
   video.setDislikes((video.getDislikes()+1));
  else{
   if(video.getDislikes() > 0)
    video.setDislikes((video.getDislikes()-1));
  } 
  
  Likes likes = likeRepository.getLikeDetails(Long.parseLong(userId), id);
  if(likes != null){  
   likes.setDisLiked(value);     
   likeRepository.save(likes);  
  }
  else{
   Likes like = new Likes(Long.parseLong(userId), id, false, value);
   likeRepository.save(like)
;
  }
  return videoRepository.save(video);
 }

for comments

public Page<Comments> getCommentsByVideoId(Pageable pageable, String videoID) {
  
  return commentsRepository.getCommentsByVideoId(pageable,Long.parseLong(videoID));
 }

 public Page<Comments> addCommentByVideoId(Pageable pageable, Comments comment) {
  if(comment != null){
   User user = userRepository.findOne(comment.getUserId());
   comment.setUser(user);
   Comments c = commentsRepository.save(comment);
   if(c != null){
    return commentsRepository.getCommentsByVideoId(pageable,c.getVideoId());
   }
  }
  return null;
 }
